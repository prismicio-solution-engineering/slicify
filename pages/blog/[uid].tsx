import Head from "next/head";
import type { GetStaticPropsContext, InferGetStaticPropsType } from "next";
import { createClient } from "../../prismicio";
import { Content } from "@prismicio/client";
import { SliceZone } from "@prismicio/react";
import * as prismicH from "@prismicio/helpers";
import { components as mktComponents } from "@/slices/marketing";
import { components as blogComponents } from "@/slices/blog";
import { authorGraphQuery } from "@/utils/graphQueries";
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { BlogHeader } from "@/components/BlogHeader";

type BlogArticleProps = InferGetStaticPropsType<typeof getStaticProps>;
type PageParams = { uid: string };

export type BlogArticleDocumentWithLinkedAuthor = Content.BlogArticleDocument & {
  data: {
    author: {
      data?: Content.AuthorDocument['data']
    }
  }
}

export default function BlogArticle({ page, author, header, footer }: BlogArticleProps) {
  return (
    <>
      <Head>
        <title>Slicify - Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header {...header.data} />
        <BlogHeader {...page} author={author} />
        {/* Remove className to have full width */}
        <SliceZone slices={page.data.slices} components={{...mktComponents, ...blogComponents}} />
        <Footer {...footer.data} />
      </main>
    </>
  );
}

export async function getStaticProps({
  previewData,
  params,
}: GetStaticPropsContext<PageParams>) {
  const client = createClient({ previewData });
  //    ^ Automatically contains references to document types

  if (params && params.uid) {
    const page =
      //    ^ Typed as BlogIndexDocument
      (await client.getByUID<Content.BlogArticleDocument>(
        "blog_article",
        params.uid
      ));

    const linkedAuthor =
      (await client.getByUID<BlogArticleDocumentWithLinkedAuthor>("blog_article", params.uid, {
        graphQuery: authorGraphQuery,
      }));

    const header = await client.getSingle<Content.HeaderDocument>("header");
    //    ^ Typed as HeaderDocument

    const footer = await client.getSingle<Content.FooterDocument>("footer");
    //    ^ Typed as FooterDocument


    if (page) {
      return {
        props: {
          page,
          author: linkedAuthor.data.author,
          header: header,
          footer: footer
        },
      };
    }
  }

  return {
    notFound: true,
  };
}

// Paths
export async function getStaticPaths() {
  const client = createClient();
  const documents = await client.getAllByType("blog_article", { lang: "*" });
  return {
    paths: documents.map((page) => `/${page.lang}${prismicH.asLink(page)}`),
    fallback: false, // if a page has already been generated but doesn't show => display the cached page
  };
}
